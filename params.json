{"name":"NBinarySearch","tagline":"Flexible binary search for all indexed collections in .NET","body":"### What is this for?\r\n\r\nOut of the box, the .NET framework provides a binary search implementation only for the `List<T>` class and `T[]` arrays. This can be frustrating, as it is sometimes desirable for performance reasons to perform a binary search on an arbitrary `IList<T>` and calling `ToList()` or `ToArray()` for this purpose causes the performance-tuners among us to toss and turn at night.\r\n\r\nWith **NBinarySearch** you can sleep soundly again. Take a look:\r\n\r\n```csharp\r\n// NBinarySearch allows us to perform a binary search on any indexed collection,\r\n// not just List<T> and T[].\r\nIList<string> userNames = GetUserNames();\r\nint johnnyIndex = userNames.BinarySearch(\"Johnny\");\r\n```\r\n\r\n### That's it?\r\n\r\nNope. What's also missing from .NET is the ability to binary search a list of elements that are sorted by some *property*. The na√Øve way to work around this is to use `Select()` followed by `ToList()`; but again, this incurs an unnecessary performance hit by populating an entirely new (potentially large) collection.\r\n\r\n```csharp\r\nclass Person\r\n{\r\n  public string Name { get; set; }\r\n  public int Age { get; set; }\r\n}\r\n\r\n// Search by any property of an object.\r\nIList<Person> users = GetUsers();\r\nint samanthaIndex = users.BinarySearchByKey(\"Samantha\", user => user.Name);\r\n\r\n// We can also specify a custom comparer, no problem.\r\nclass AgeGroupComparer : IComparer<int>\r\n{\r\n  public int Compare(int x, int y)\r\n  {\r\n    return GetAgeGroup(x).CompareTo(GetAgeGroup(y));\r\n  }\r\n\r\n  int GetAgeGroup(int age)\r\n  {\r\n    if (age < 18)\r\n      return 0;\r\n    else if (age < 30)\r\n      return 1;\r\n    else if (age < 45)\r\n      return 2;\r\n    else if (age < 60)\r\n      return 3;\r\n    else\r\n      return 4;\r\n  }\r\n}\r\n\r\nvar john = new Person { Name = \"John\", Age = 18 };\r\nIList<Person> activeUsers = GetActiveUsers();\r\nint johnIndex = activeUsers.BinarySearchByValue(\r\n    john,\r\n    p => p.Age,\r\n    new AgeGroupComparer()\r\n);\r\n```\r\n\r\nHopefully from the brief examples above you get a sense of where **NBinarySearch** is useful.\r\n\r\n### Installation\r\n\r\nThis one's pretty straightforward. First clone the repo:\r\n\r\n```\r\n$ git clone git://github.com/dtao/NBinarySearch.git\r\n```\r\n\r\nThen build locally with whatever toolchain you prefer, and you should be good to go.\r\n\r\n### Authors and Contributors\r\n\r\n**NBinarySearch** was developed by [Dan Tao](http://philosopherdeveloper.com) (<a href=\"https://github.com/dtao\" class=\"user-mention\">@dtao</a> on GitHub), an engineer in San Francisco.\r\n\r\nI currently work at [Cardpool](http://www.cardpool.com) where, ironically, we don't use .NET at all.\r\n\r\n### Contact\r\n\r\nFeel free to reach out to me at daniel.tao@gmail.com with any questions or concerns. If you find any bugs in this library or want to add features to it, create a ticket or submit a pull request!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}